
def post_now(update: Update, context: CallbackContext):
    """–ü—É–±–ª–∏–∫—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤ –∫–∞–Ω–∞–ª, –º–∏–Ω—É—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
    bot = context.bot
    message = update.message

    if not message:
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–ª /now, –±–æ—Ç —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –∂–¥–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç
    if message.text and message.text.strip() == "/now":
        message.reply_text("üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        return  # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—É–±–ª–∏–∫—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    if message.text and not message.text.startswith("/now"):
        bot.send_message(POST_CHANNEL, f"\n\n{message.text}", parse_mode="Markdown")
        message.reply_text("‚úÖ –¢–µ–∫—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")

    elif message.photo:
        file_id = message.photo[-1].file_id
        caption = message.caption if message.caption else ""
        bot.send_photo(POST_CHANNEL, file_id, caption=f"\n\n{caption}", parse_mode="Markdown")
        message.reply_text("‚úÖ –§–æ—Ç–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")

    elif message.video:
        file_id = message.video.file_id
        caption = message.caption if message.caption else ""
        bot.send_video(POST_CHANNEL, file_id, caption=f"\n\n{caption}", parse_mode="Markdown")
        message.reply_text("‚úÖ –í–∏–¥–µ–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")

    else:
        message.reply_text("‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")











from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import os
import json
import datetime
import pytz
import time
import threading

# üõ† –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PLANNER_FILE = "planner.json"
DEFAULT_START_TIME = "06:00"
DEFAULT_INTERVAL = 120  
DEFAULT_POSTS_PER_DAY = 6  
POST_CHANNEL = "@lifemotiv1"  
TIMEZONE = pytz.timezone("Europe/Bratislava")  


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç)
if os.path.exists(PLANNER_FILE):
    with open(PLANNER_FILE, "r", encoding="utf-8") as f:
        try:
            planner = json.load(f)
        except json.JSONDecodeError:
            planner = {}  # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
else:
    planner = {}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ "settings" –µ—Å—Ç—å –≤ planner
DEFAULT_SETTINGS = {
    "st": "06:00",  # –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞
    "in": 120,  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
    "po": 6  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å
}

if "settings" not in planner:
    planner["settings"] = DEFAULT_SETTINGS
else:
    # –ï—Å–ª–∏ –∫–∞–∫–∏—Ö-—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
    for key, value in DEFAULT_SETTINGS.items():
        if key not in planner["settings"]:
            planner["settings"][key] = value

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def save_planner():
    with open(PLANNER_FILE, "w", encoding="utf-8") as f:
        json.dump(planner, f, indent=4, ensure_ascii=False)

save_planner()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏


# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã (–ª—É—á—à–µ, —á–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–æ–¥–µ!)
BOT_TOKEN = os.getenv("BOT_TOKEN", "7897333136:AAGA3U4VAnWWbbtjU-FBFWWCoTA1KP3Bvcc")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
if os.path.exists(PLANNER_FILE):
    with open(PLANNER_FILE, "r", encoding="utf-8") as f:
        planner = json.load(f)
else:
    planner = {}

# üíæ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
def save_planner():
    with open(PLANNER_FILE, "w", encoding="utf-8") as f:
        json.dump(planner, f, indent=4, ensure_ascii=False)

settings = planner["settings"]  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é settings

# üìÜ –§—É–Ω–∫—Ü–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏
def get_weekday(date_str):
    weekdays = ["–ø–Ω–¥", "–≤—Ç—Ä", "—Å—Ä–¥", "—á–µ—Ç", "–ø—Ç–Ω", "—Å—É–±", "–≤—Å–∫"]
    date_obj = datetime.datetime.strptime(date_str, "%d%m%y")
    return weekdays[date_obj.weekday()]

# üéõ –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext):
    message = update.message if update.message else update.effective_message
    message.reply_text(
        "ü§ñ *–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω!*\n"
       f"üìÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {planner['settings']['st']}\n"
       f"‚è≥ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {planner['settings']['in']} –º–∏–Ω—É—Ç\n"
       f"üìù –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: {planner['settings']['po']}\n"
        ,
        parse_mode="Markdown"
    )
    show_schedule(update, context)

# üìÖ –ö–æ–º–∞–Ω–¥–∞ /d (–≤—ã–±–æ—Ä –¥–Ω—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
def day_command(update: Update, context: CallbackContext):
    if len(context.args) != 1 or not context.args[0].isdigit() or len(context.args[0]) != 4:
        update.message.reply_text("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /d DDMM")
        return

    day_month = context.args[0]
    now = datetime.datetime.now(TIMEZONE)
    current_year = now.year  
    date = f"{day_month}{str(current_year)[-2:]}"  

    try:
        datetime.datetime.strptime(date, "%d%m%y")
    except ValueError:
        update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DDMM.")
        return

    if datetime.datetime.strptime(date, "%d%m%y").date() < now.date():
        update.message.reply_text("‚õî –ù–µ–ª—å–∑—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É.")
        return

    if date == now.strftime("%d%m%y"):
        update.message.reply_text("‚õî –ù–µ–ª—å–∑—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å.")
        return

    context.user_data["current_day"] = date
    if date not in planner:
        planner[date] = []
        save_planner()

    weekday = get_weekday(date)
    update.message.reply_text(f"‚úÖ –ö –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –≥–æ—Ç–æ–≤ {date[:2]}.{date[2:4]}.{date[4:]} {weekday}.")



def show_schedule(update: Update, context: CallbackContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ –¥–Ω–∏."""
    global planner
    if not planner or len(planner.keys()) == 1:
        update.message.reply_text("üì≠ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç.")
        return

    now = datetime.datetime.now(TIMEZONE).replace(tzinfo=None)  # –£–±–∏—Ä–∞–µ–º offset –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—à–µ–¥—à–∏—Ö –¥–∞—Ç –∏ –ø–æ—Å—Ç–æ–≤
    updated_planner = {}
    for date, posts in planner.items():
        if date == "settings":
            continue
        try:
            date_obj = datetime.datetime.strptime(date, "%d%m%y")  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É
            if date_obj >= now.replace(hour=0, minute=0, second=0, microsecond=0):  # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞
                updated_posts = [post for post in posts if datetime.datetime.strptime(f"{date} {post['time']}", "%d%m%y %H:%M") > now]
                if updated_posts:
                    updated_planner[date] = updated_posts
        except ValueError:
            continue

    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º planner –±–µ–∑ —Å—Ç–∞—Ä—ã—Ö –¥–∞—Ç
    planner = {"settings": planner.get("settings", DEFAULT_SETTINGS)}
    planner.update(updated_planner)
    save_planner()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∞—Ç –≤ planner
    scheduled_days = sorted(
        [datetime.datetime.strptime(date, "%d%m%y") for date in planner.keys() if date.isdigit()]
    )

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç ‚Äî —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
    if not scheduled_days:
        update.message.reply_text("üì≠ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç –ø–µ—Ä–≤–æ–π –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    full_date_range = []
    current_date = scheduled_days[0]
    while current_date <= scheduled_days[-1]:
        full_date_range.append(current_date)
        current_date += datetime.timedelta(days=1)

    # –°–ª–æ–≤–∞—Ä—å —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    ru_weekdays = {
        "Mon": "–ø–Ω–¥", "Tue": "–≤—Ç—Ä", "Wed": "—Å—Ä–¥", "Thu": "—á—Ç–≤",
        "Fri": "–ø—Ç–Ω", "Sat": "—Å—É–±", "Sun": "–≤—Å–∫"
    }

    # üî• –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedule_text = "üìÜ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤:*\n"
    for date in full_date_range:
        formatted_date = date.strftime('%d.%m.%y')
        weekday_name = date.strftime("%a")
        weekday_rus = ru_weekdays.get(weekday_name, weekday_name)
        date_key = date.strftime("%d%m%y")

        if date_key in planner and planner[date_key]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å—Ç—ã
            schedule_text += f"\nüìÖ *{formatted_date} {weekday_rus}:*\n"
            for idx, post in enumerate(planner[date_key], start=1):
                schedule_text += f"  {idx}) {post['time']} - –û–ö\n"
        else:  # –ï—Å–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
            schedule_text += f"\nüìÖ *{formatted_date} {weekday_rus}:* ‚ùå –ü–£–°–¢–û\n"

    update.message.reply_text(schedule_text, parse_mode="Markdown")

def handle_files(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–∞–π–ª–æ–≤"""
    if "current_day" not in context.user_data:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∫–æ–º–∞–Ω–¥–æ–π /d DDMM.")
        return

    date = context.user_data["current_day"]
    if len(planner.get(date, [])) >= planner["settings"]["po"]:
        update.message.reply_text("‚ùå –í—Å–µ –ø–æ—Å—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –∫–æ–º–∞–Ω–¥–æ–π /d DDMM.")
        return

    now = datetime.datetime.now(TIMEZONE)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    if not planner.get(date):
        post_time = now + datetime.timedelta(minutes=2)  # –ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
    else:
        last_post_time = datetime.datetime.strptime(planner[date][-1]["time"], "%H:%M")
        post_time = last_post_time + datetime.timedelta(minutes=planner["settings"]["in"])  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    post_type = "text"
    post_content = update.message.text if update.message.text else "–û–ö"

    if update.message.photo:
        post_type = "photo"
        post_content = update.message.photo[-1].file_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–ª—è —Ñ–æ—Ç–æ

    if update.message.video:
        post_type = "video"
        post_content = update.message.video.file_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–ª—è –≤–∏–¥–µ–æ

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Å—Ç –≤ JSON
    post_data = {
        "time": post_time.strftime("%H:%M"),
        "type": post_type,
        "content": post_content
    }

    planner[date].append(post_data)
    save_planner()

    update.message.reply_text(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {post_time.strftime('%H:%M')} {datetime.datetime.strptime(date, '%d%m%y').strftime('%d.%m.%y')}.")

    # –ï—Å–ª–∏ –¥–µ–Ω—å –∑–∞–ø–æ–ª–Ω–µ–Ω, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
    if len(planner[date]) >= planner["settings"]["po"]:
        update.message.reply_text("üéØ –í—Å–µ –ø–æ—Å—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –∫–æ–º–∞–Ω–¥–æ–π /d DDMM.")





# ‚è∞ –ö–æ–º–∞–Ω–¥–∞ /st (–≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞)
def set_start_time(update: Update, context: CallbackContext):
    if len(context.args) != 1 or not context.args[0].isdigit():
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /st HHMM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0930).")
        return
    
    time_input = context.args[0]
    if len(time_input) == 4:
        hour, minute = int(time_input[:2]), int(time_input[2:])
        if hour >= 24 or minute >= 60:
            update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.")
            return
        
        settings["start_time"] = f"{hour:02d}:{minute:02d}"
        update.message.reply_text(f"‚è∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞: {settings['start_time']}")

# üîÑ –ö–æ–º–∞–Ω–¥–∞ /in (–∏–Ω—Ç–µ—Ä–≤–∞–ª)
def set_interval(update: Update, context: CallbackContext):
    if len(context.args) != 1 or not context.args[0].isdigit():
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /in <–º–∏–Ω—É—Ç—ã> (–Ω–∞–ø—Ä–∏–º–µ—Ä, /in 180).")
        return
    
    interval = int(context.args[0])
    settings["interval"] = interval
    update.message.reply_text(f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {interval} –º–∏–Ω—É—Ç.")

# üìä –ö–æ–º–∞–Ω–¥–∞ /po (–ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å)
def set_posts_per_day(update: Update, context: CallbackContext):
    if len(context.args) != 1 or not context.args[0].isdigit():
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /po <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> (–Ω–∞–ø—Ä–∏–º–µ—Ä, /po 4).")
        return
    
    posts_per_day = int(context.args[0])
    settings["posts_per_day"] = posts_per_day
    update.message.reply_text(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {posts_per_day}.")

# üóë –ö–æ–º–∞–Ω–¥–∞ /cla (–æ—á–∏—Å—Ç–∫–∞ –í–°–ï–ì–û –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)
def clear_all(update: Update, context: CallbackContext):
    planner.clear()
    save_planner()
    update.message.reply_text("‚úÖ –í—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã —É–¥–∞–ª–µ–Ω—ã.")

# üóë –ö–æ–º–∞–Ω–¥–∞ /c (–æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è)
def clear_day(update: Update, context: CallbackContext):
    if len(context.args) != 1 or not context.args[0].isdigit() or len(context.args[0]) != 4:
        update.message.reply_text("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /c DDMM")
        return

    day_month = context.args[0]
    current_year = datetime.datetime.now(TIMEZONE).year  # –¢–µ–∫—É—â–∏–π –≥–æ–¥
    date = f"{day_month}{str(current_year)[-2:]}"  # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DDMMYY

    if date in planner:
        del planner[date]
        save_planner()
        update.message.reply_text(f"üóë –ü–æ—Å—Ç—ã –Ω–∞ {date[:2]}.{date[2:4]}.{date[4:]} —É–¥–∞–ª–µ–Ω—ã.")
    else:
        update.message.reply_text(f"üì≠ –ù–∞ {date[:2]}.{date[2:4]}.{date[4:]} –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç.")


# ‚è≥ –ö–æ–º–∞–Ω–¥–∞ /time (–ø–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É –±–æ—Ç–∞)
def time_command(update: Update, context: CallbackContext):
    now = datetime.datetime.now(TIMEZONE).strftime("%d.%m.%Y %H:%M")
    update.message.reply_text(f"üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ë—Ä–∞—Ç–∏—Å–ª–∞–≤–∞): {now}")


# üì¢ –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
def post_scheduler():
    while True:
        now = datetime.datetime.now(TIMEZONE).strftime("%d%m%y %H:%M")

        for date, posts in list(planner.items()):
            if date == "settings":
                continue
            for post in posts[:]:  # –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
                scheduled_time = f"{date} {post['time']}"
                if scheduled_time <= now:
                    try:
                        if post["type"] == "text":
                            updater.bot.send_message(chat_id=POST_CHANNEL, text=post["content"])
                        elif post["type"] == "photo":
                            updater.bot.send_photo(chat_id=POST_CHANNEL, photo=post["content"])
                        elif post["type"] == "video":
                            updater.bot.send_video(chat_id=POST_CHANNEL, video=post["content"])

                        posts.remove(post)  # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                        save_planner()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        print(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç –Ω–∞ {date} –≤ {post['time']}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")

        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É



if __name__ == "__main__":
    updater = Updater("7897333136:AAGA3U4VAnWWbbtjU-FBFWWCoTA1KP3Bvcc", use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("d", day_command))
    dp.add_handler(CommandHandler("ss", show_schedule))
    dp.add_handler(CommandHandler("st", set_start_time))
    dp.add_handler(CommandHandler("in", set_interval))
    dp.add_handler(CommandHandler("po", set_posts_per_day))
    dp.add_handler(CommandHandler("cla", clear_all))
    dp.add_handler(CommandHandler("c", clear_day))
    dp.add_handler(CommandHandler("time", time_command))
    dp.add_handler(MessageHandler(Filters.all, handle_files))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    updater.start_polling()
    updater.idle()

